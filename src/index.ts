import { app, BrowserWindow, Tray, Menu, nativeImage, autoUpdater, dialog, shell, nativeTheme } from 'electron';
import config from "./config.json";
import icons from "./icons.json";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let contextMenu : Menu;
let tray : Tray;
let isUpdating = false;

const gotTheLock = app.requestSingleInstanceLock()

if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', (event, commandLine, workingDirectory) => {
    dialog.showMessageBox({
      type: 'error',
      buttons: ['Ok'],
      title: 'Error',
      message: "There is already an instance of Crooms Bell Schedule running! Quit that instance first!"
    });
  })
}

const checkForUpdates = (): void => {
  if (isUpdating){
    return;
  }
  if (!app.isPackaged){
    return;
  }
  if (!contextMenu){
    return;
  }
  if (!tray){
    return;
  }

  isUpdating = true;
  contextMenu.getMenuItemById("checkForUpdatesButton").enabled = false;
  contextMenu.getMenuItemById("reopenWindowButton").enabled = false;
  tray.setContextMenu(contextMenu);

  autoUpdater.checkForUpdates();
}

if (app.isPackaged){
  const server = config.hazelUpdateURL;
  const url = `${server}/update/${process.platform}/${app.getVersion()}`;

  autoUpdater.setFeedURL({ url });

  autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {
    dialog.showMessageBox({
      type: 'info',
      buttons: ['Restart now', 'Restart later'],
      title: 'Application Update',
      message: process.platform === 'win32' ? releaseNotes : releaseName,
      detail:
        'A new version of the Crooms Bell Schedule has been\ndownloaded. Restart the application to apply the updates.'
    }).then((returnValue) => {
      if (returnValue.response === 0) autoUpdater.quitAndInstall()
    });
    contextMenu.getMenuItemById("checkForUpdatesButton").enabled = true;
    contextMenu.getMenuItemById("reopenWindowButton").enabled = true;
    tray.setContextMenu(contextMenu);
    isUpdating = false;
    try {
      autoUpdater.off("update-not-available", showUpToDateDialog);
    }
    catch (e) {
      console.warn(e);
    }
  })

  autoUpdater.on('error', (message) => {
    console.error('There was a problem updating the application');
    console.error(message);
    /*
    dialog.showMessageBox({
      type: 'error',
      buttons: ['Ok'],
      title: 'Update Error',
      message: "There was an error while trying to update the Crooms Bell Schedule:",
      detail: message.toString()
    });

     */
    contextMenu.getMenuItemById("checkForUpdatesButton").enabled = true;
    contextMenu.getMenuItemById("reopenWindowButton").enabled = true;
    tray.setContextMenu(contextMenu);
    isUpdating = false;

  });

  // Check for updates every 1 hour.
  setInterval(()=> {
    checkForUpdates();
    autoUpdater.on("update-not-available", enableButtonsOnAutoUpdate);
  }, 3600000);
}

const enableButtonsOnAutoUpdate = (): void => {
  contextMenu.getMenuItemById("checkForUpdatesButton").enabled = true;
  contextMenu.getMenuItemById("reopenWindowButton").enabled = true;
  tray.setContextMenu(contextMenu);
  isUpdating = false;
  autoUpdater.off("update-not-available", enableButtonsOnAutoUpdate);
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 79,
    width: 365,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true
    },
    alwaysOnTop: true,
    title: "Crooms Bell Schedule",
    show: false,
    autoHideMenuBar: true,
    titleBarStyle: "hidden",
    focusable: false,
    maximizable: false,
    closable: true,
    minimizable: false,
    hasShadow: false,
    maxHeight: 79,
    minHeight: 79,
    minWidth: 355
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  // Set the opacity of the app.
  mainWindow.setOpacity(0.7);

  // Open the DevTools.
  // Comment in a prod release.
  // mainWindow.webContents.openDevTools();

  mainWindow.once('ready-to-show', () => {
    mainWindow.showInactive()
  });

  let theme = "light";
  if (nativeTheme.shouldUseDarkColors){
    theme = "dark";
  }

  // @ts-ignore
  const updateIcon = nativeImage.createFromDataURL(icons.updateIcon);
  // @ts-ignore
  const reopenIcon = nativeImage.createFromDataURL(icons.reopenIcon);
  // @ts-ignore
  const openInBrowserIcon = nativeImage.createFromDataURL(icons.openInBrowserIcon);
  // @ts-ignore
  const bugReportIcon = nativeImage.createFromDataURL(icons.bugReportIcon);
  // @ts-ignore
  const closeIcon = nativeImage.createFromDataURL(icons.closeIcon);
  // @ts-ignore
  const infoIcon = nativeImage.createFromDataURL(icons.infoIcon);

  // disable right click menu on move region
  const WM_INITMENU = 0x0116;
  mainWindow.hookWindowMessage(WM_INITMENU, () => {
    mainWindow.setEnabled(false);
    mainWindow.setEnabled(true);
  });

  const icon = nativeImage.createFromDataURL(icons.appIcon);

  tray = new Tray(icon);
  contextMenu = Menu.buildFromTemplate([
    { label: "Crooms Bell Schedule v" + app.getVersion().toString(), type: "normal", enabled: false, id: "title", icon: infoIcon},
    { type: "separator" },
    { label: 'Check for Updates', type: 'normal', click: () => {manualUpdate();}, id: "checkForUpdatesButton", icon: updateIcon },
    { label: 'Reopen Window', type: 'normal', click: () => {mainWindow.close(); tray.destroy(); createWindow();}, id: "reopenWindowButton", icon: reopenIcon },
    { label: 'Open CBSH Website', type: 'normal', click: () => {siteOpen();}, id: 'siteButton' , icon: openInBrowserIcon},
    { label: 'Report a Bug', type: 'normal', click: () => {bugReport();}, id: 'bugReportsButton', icon: bugReportIcon},
    { label: 'Quit', type: 'normal', click: () => {app.quit()}, id: "quitButton", icon: closeIcon }
  ]);
  tray.setToolTip('Crooms Bell Schedule');
  tray.setContextMenu(contextMenu);
};

/*const aboutWindow = () => {
  const aboutWin = new BrowserWindow({
    height: 600,
    width: 400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    alwaysOnTop: false,
    title: "Crooms Bell Schedule | About",
    show: false,
    autoHideMenuBar: true,
    focusable: true,
    maximizable: false,
    closable: true,
    minimizable: true,
    hasShadow: true
  });

  // And load the index.html of the app.
  aboutWin.loadURL("https://google.com");

  // Set the opacity of the app.
  aboutWin.setOpacity(1);

  // Open the DevTools.
  // Comment in a prod release.
  // mainWindow.webContents.openDevTools();

  aboutWin.once('ready-to-show', () => {
    aboutWin.show()
  });
}*/

const manualUpdate = (): void => {
  autoUpdater.on("update-not-available", showUpToDateDialog);
  checkForUpdates();
}

const siteOpen = (): void => {
  shell.openExternal("https://croomssched.tech/")
}

const showUpToDateDialog = (): void => {
  dialog.showMessageBox({
    type: 'info',
    buttons: ['OK'],
    title: 'No Updates Available',
    message: "You're all set!",
    detail:
        "The application is up-to-date."
  })
  contextMenu.getMenuItemById("checkForUpdatesButton").enabled = true;
  contextMenu.getMenuItemById("reopenWindowButton").enabled = true;
  tray.setContextMenu(contextMenu);
  isUpdating = false;
  autoUpdater.off("update-not-available", showUpToDateDialog);
}

const disableUpdatesForDevMode = (): void => {
  dialog.showMessageBox({
    type: 'info',
    buttons: ['OK'],
    title: 'Developer Mode',
    message: "You're in developer mode.",
    detail:
        "The application will not update since you are in developer mode."
  });
}

const bugReport = (): void => {
  shell.openExternal("https://github.com/ajcoolcat/BellSchedOverlay/issues")
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
    checkForUpdates();
  }
});